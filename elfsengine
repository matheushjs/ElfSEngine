#!/usr/bin/python3

import sys, os
from os import path
import subprocess as subp
import termcolor as tc

# Knowledgebase path
KB_PATH="~/Warehouse/elfsengine/"
KB_PATH_EXP=path.expanduser(KB_PATH)

# custom colors
colorFilename = lambda text: tc.colored(text, "cyan")
colorWarning  = lambda text: tc.colored(text, "red", attrs=["bold"])
colorSuccess  = lambda text: tc.colored(text, "green", attrs=["bold"])

# Wrapper for the grep command line utility
# If return code isn't 0, raise an exception with the code.
#   **kwargs:
#       "e": string to pass as "-e" options (can be list)
#       "r": boolean for recursive operation
#       "file": file or directory with files with which to match (can be list)
def grep(**kwargs):
    grepArgs = ["grep"]

    print(kwargs)

    # All arguments that can be either string or list
    # We convert them to list first
    for symbol in ["e", "file"]:
        if symbol in kwargs and type(kwargs[symbol]) == str:
            kwargs[symbol] = [ kwargs[symbol] ]

    if "r" in kwargs:
        grepArgs += ["-r"]

    if "e" in kwargs:
        [ grepArgs.extend(["-e", i]) for i in kwargs["e"] ]

    if "file" in kwargs:
        grepArgs += kwargs["file"]

    try:
        ret = subp.check_output(grepArgs).decode("utf8")
    except subp.CalledProcessError as e:
        print(colorWarning(str(e)))
        return None

    return ret

def search(patterns, options):
    matchedFiles = []

    grepRet = grep(
                e=patterns,
                r=True,
                file=KB_PATH_EXP,
            )

    if grepRet:
        grepRet = grepRet.strip().split("\n")

        # Print what we found and make a list of files
        for line in grepRet:
            idx = line.find(":")
            filename = line[:idx]
            match    = line[idx+1:]
            print("{}:    {}".format(colorFilename(filename.replace(KB_PATH_EXP, "")), match))

            if filename not in matchedFiles:
                matchedFiles.append(filename)

    # Get file names relative to the knowledgebase directory
    matchedFilesRel = [f.replace(KB_PATH_EXP, "") for f in matchedFiles]

    print("\nFiles that Matched:")
    for idx, filename in enumerate(matchedFilesRel):
        print("\t[{}] - {}".format(idx, colorFilename(filename)))

    while True:
        try:
            idx = int(input("\nIndex of file to open? "))
            subp.call(["vim", matchedFiles[idx]])
        except ValueError as e: # Input was non-integer
            break
        except IndexError as e: # Input was out of bounds
            print("\n" + colorWarning("Invallid index.") + " Please type something between {}-{}".format(0, len(matchedFilesRel) - 1))
        except KeyboardInterrupt as e: # User pressed Ctrl + C
            print()
            break

    print(colorSuccess("Terminating."))
    return None

def main(argv):
    helpmsg="\n".join([
                "Usage: {} [OPTIONS] PATTERN [PATTERN...]".format(argv[0]),
                "",
                "ElfSEngine searches for the given PATTERNs within all files in your knowledgebase.",
                "",
                "OPTIONS",
                "\t-h, --help         - Shows this helping message.",
                "\t-i, --interactive  - Interactively shows each matching file using VIM.",
                "\t-c, --case         - Turns ON case-sensitiveness.",
            ])

    options = {}

    options["h"] = True if argv.count("-h") or argv.count("--help") else False
    options["i"] = True if argv.count("-i") or argv.count("--case") else False

    if options["h"] or len(argv) == 1:
        print(helpmsg)
        return 1

    # Clear options and parameters from argv
    noops = ["-h", "--help", "-i", "--case"]
    for op in noops:
        while argv.count(op) > 0:
            argv.remove(op)

    # Clear program name (first argument)
    # All remaining arguments are PATTERNs
    patterns = argv[1:]

    # Check knowledebase existence
    try:
        os.listdir(path.expanduser(KB_PATH))
    except FileNotFoundError:
        print("File {} does not exist. Creating it now.".format(KB_PATH))
        subp.run(["mkdir", KB_PATH_EXP])

    search(patterns, options)

    return 0

sys.exit(main(sys.argv))
