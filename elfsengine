#!/usr/bin/python3

import sys, os
from os import path
import subprocess as subp

# Knowledgebase path
KB_PATH="~/Warehouse/elfsengine/"
KB_PATH_EXP=path.expanduser(KB_PATH)

def search(files, patterns, options):
    matchedFiles = []

    for f in files:
        for pat in patterns:
            print("grep", pat, f)

            try:
                ret = subp.check_output(["grep", pat, f]).decode("utf8").strip().split("\n")

                if f not in matchedFiles:
                    matchedFiles.append(f)

                # print returned lines from grep
                for line in ret:
                    print("{}:    {}".format(f.replace(KB_PATH_EXP, ""), line))

            except subp.CalledProcessError as e:
                if(e.returncode != 1):
                    print("'grep' returned {} on file {}.".format(e.returncode, f))

    # Get file names relative to the knowledgebase directory
    matchedFilesRel = [f.replace(KB_PATH_EXP, "") for f in matchedFiles]

    print()
    for f, r in zip(matchedFiles, matchedFilesRel):
        inp = input("Open {}? [Y/n]".format(r))
        if inp.lower() == "y":
            subp.call(["vim", f])

def main(argv):
    helpmsg="\n".join([
                "Usage: {} [OPTIONS] PATTERN [PATTERN...]".format(argv[0]),
                "",
                "ElfSEngine searches for the given PATTERNs within all files in your knowledgebase.",
                "",
                "OPTIONS",
                "\t-h, --help         - Shows this helping message.",
                "\t-i, --interactive  - Interactively shows each matching file using VIM.",
                "\t-c, --case         - Turns ON case-sensitiveness.",
            ])

    options = {}

    options["h"] = True if argv.count("-h") or argv.count("--help") else False
    options["i"] = True if argv.count("-i") or argv.count("--interactive") else False
    options["c"] = True if argv.count("-v") or argv.count("--case") else False

    if options["h"] or len(argv) == 1:
        print(helpmsg)
        return 1

    # Clear options and parameters from argv
    noops = ["-h", "--help", "-i", "--interactive", "-c", "--case"]
    for op in noops:
        while argv.count(op) > 0:
            argv.remove(op)

    # Clear program name (first argument)
    # All remaining arguments are PATTERNs
    patterns = argv[1:]

    # Check knowledebase existence
    try:
        os.listdir(path.expanduser(KB_PATH))
    except FileNotFoundError:
        print("File {} does not exist. Creating it now.".format(KB_PATH))
        subp.run(["mkdir", KB_PATH_EXP])

    # Get all files recursively
    files = subp.check_output(["find", KB_PATH_EXP, "-type", "f"]) \
                .decode("utf8") \
                .strip() \
                .split("\n")

    search(files, patterns, options)

    return 0

sys.exit(main(sys.argv))
